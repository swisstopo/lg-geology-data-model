name: Uploading assets to GitHub release


on:
  push:
    tags:
      - "v*.*.*"



jobs:
  build:
    uses: ./.github/workflows/build.yaml  # use the callable build job to run build
  release:
    runs-on: ubuntu-latest
    needs: [build]  # require build to pass before deploy runs
    permissions:
      contents: write # Grant write permission for creating releases and uploading assets
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set releases variables
        shell: bash
        run: |
          RELEASE=$(python -c "import yaml; print(yaml.safe_load(open('datamodel.yaml'))['model']['revision'])")
          SOURCES_DIR=$(python -c "import yaml; print(yaml.safe_load(open('datamodel.yaml'))['model']['sources_dir'])")
          echo "RELEASE=$RELEASE" >> $GITHUB_ENV
          echo "SOURCES_DIR=$SOURCES_DIR" >> $GITHUB_ENV
          echo "SHORT_RELEASE=$(echo $RELEASE | cut -d'.' -f1,2)" >> $GITHUB_ENV
          echo "version=$(<VERSION)" >> $GITHUB_ENV
      - name: Print release variables
        shell: bash
        run: |
          echo "=== PKG_VERSION=${{ env.version }} ==="
          echo "=== RELEASE=${{ env.RELEASE }} ==="
          echo "=== SHORT=${{ env.SHORT_RELEASE }} ==="
          echo "=== SOURCES_DIR=${{ env.SOURCES_DIR }} ==="
      - name: Get previous release tag and generate release body
        shell: bash
        id: release_info # Assign an ID to this step to reference its outputs
        run: |
            # Extract the current tag name from the GitHub reference
            CURRENT_TAG="${{ github.ref_name }}"
            
            # Get the second most recent tag, which is typically the "previous" release tag.
            # '--sort=-v:refname' sorts tags by version in descending order.
            # 'sed -n 2p' prints the second line.
            PREVIOUS_TAG=$(git tag --sort=-v:refname | sed -n 2p)
            
            echo "Current Tag: $CURRENT_TAG"
            echo "Previous Tag: $PREVIOUS_TAG"
            
            # Initialize the release body with a header for the current release
            RELEASE_BODY_CONTENT="## Release Notes for $CURRENT_TAG\n\n"
            
            # Conditionally add content based on whether a previous tag exists
            if [ -n "$PREVIOUS_TAG" ]; then
              RELEASE_BODY_CONTENT+="### Changes since $PREVIOUS_TAG:\n"
              # Get commit messages between the previous tag and the current tag.
              # '--pretty=format:"* %s"' formats each commit as a bullet point with its subject.
              COMMITS=$(git log --pretty=format:"* %s" "$PREVIOUS_TAG".."$CURRENT_TAG")
              if [ -n "$COMMITS" ]; then
                RELEASE_BODY_CONTENT+="$COMMITS\n\n"
              else
                RELEASE_BODY_CONTENT+="No specific changes found between $PREVIOUS_TAG and $CURRENT_TAG.\n\n"
              fi
            else
              # If no previous tag, this is likely the first release.
              RELEASE_BODY_CONTENT+="### Initial Release\n"
              RELEASE_BODY_CONTENT+="This is the very first release for this project!\n\n"
              # Optionally, list initial commits for the first release
              COMMITS=$(git log --pretty=format:"* %s" "$CURRENT_TAG")
              if [ -n "$COMMITS" ]; then
                RELEASE_BODY_CONTENT+="Initial commits:\n$COMMITS\n\n"
              fi
            fi
            
            RELEASE_BODY_CONTENT+="See attached artifacts for more details."
            
            # Write the generated release body content to a temporary file.
            # This is necessary because multi-line outputs cannot be directly
            # passed through step outputs easily, but `ncipollo/release-action`
            # supports reading from a file via `body_path`.
            echo "$RELEASE_BODY_CONTENT" > .release_body.txt
            
            # Set the previous tag as an output of this step, which can be used
            # in subsequent steps if needed.
            echo "previous_tag=$PREVIOUS_TAG" >> "$GITHUB_OUTPUT"
            # Set the path to the generated release body file as an output.
            echo "release_body_path=.release_body.txt" >> "$GITHUB_OUTPUT"
          # Ensure bash is used for shell commands for consistent behavior

      - name: Download assets from build
        uses: actions/download-artifact@v4
        with:
          name: geology-data-model-${{ env.RELEASE }}
          path: ./temp-artifacts

      - name: Rename files to avoid conflicts
        run: |
          mkdir -p release-assets
          # Copy with language-specific names
          cp temp-artifacts/outputs/de/datamodel.pdf release-assets/datamodel-de.pdf
          cp temp-artifacts/outputs/fr/datamodel.pdf release-assets/datamodel-fr.pdf
          cp temp-artifacts/outputs/de/datamodel.docx release-assets/datamodel-de.docx
          cp temp-artifacts/outputs/fr/datamodel.docx release-assets/datamodel-fr.docx
          cp temp-artifacts/outputs/ER-GCOVER.svg release-assets/ER-GCOVER.svg
          cp temp-artifacts/outputs/ER-GCOVER.pdf release-assets/ER-GCOVER.pdf
          cp temp-artifacts/${{ env.SOURCES_DIR }}/gcoverp_export_simple.json release-assets/gcoverp_export_simple.json
          # List files to verify
          ls -la release-assets/
      - name: Ensure file handles are properly closed
        run: |
           # Ensure all files are properly closed before upload
           for file in release-assets/*; do
              exec 3<>"$file"
              exec 3>&-
           done
      - name: Get tag name
        id: get_tag
        run: echo "TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          # Step 3: Create GitHub Release and upload artifacts using ncipollo/release-action
      - name: Create GitHub Release
        # Use the ncipollo/release-action. It's good practice to pin to a specific version.
        uses: ncipollo/release-action@v1.16.0

        # Define inputs for the action using the 'with' keyword
        with:
                 token: ${{ secrets.TOKEN }}
                 tag: ${{ github.ref_name }} # github.ref_name directly gives the tag name (e.g., v1.0.0)
                 name: Release ${{ github.ref_name }}
                 allowUpdates: true

                 # Optional: The body/description of the release notes.
                 # You can include dynamic content, commit messages, or static text.
                 # Here, we're using a multiline string for readability.
                 # body: |
                 #  ## Release Notes for ${{ github.ref_name }}
                 #
                 #  This is an automated release.
                 body_path: ${{ steps.release_info.outputs.release_body_path }}
                 draft: false
                 prerelease: false
                 artifacts: |
                   release-assets/*
             

      - name: Upload Release Assets using gh CLI
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
        run: |
          # The tag name from the release event or extracted from GITHUB_REF
          RELEASE_TAG="${{ steps.get_tag.outputs.TAG }}"

          # Upload each file individually
          gh release upload "$RELEASE_TAG" release-assets/datamodel-de.pdf --clobber
          gh release upload "$RELEASE_TAG" release-assets/datamodel-fr.pdf --clobber
          gh release upload "$RELEASE_TAG" release-assets/datamodel-de.docx --clobber
          gh release upload "$RELEASE_TAG" release-assets/datamodel-fr.docx --clobber
          gh release upload "$RELEASE_TAG" release-assets/ER-GCOVER.svg --clobber
          gh release upload "$RELEASE_TAG" release-assets/ER-GCOVER.pdf --clobber
          gh release upload "$RELEASE_TAG" release-assets/gcoverp_export_simple.json --clobber




